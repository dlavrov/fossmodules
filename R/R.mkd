


### R History  

### Ways to run R

### Why use R?
* Advantages
    * Can be run nearly anywhere (servers, clusters, etc)
    * lightweight on system resources
    * useful for testing
* Disadvantages 
    * No gui, or detached gui
    * Not an integrated development environment



#### RStudio
[RStudio](http://www.rstudio.com/) is a development environment for R that is very easy to use.

![RStudio Desktop](./images/rstudio-windows.png)

* Advantages
    * Easy to use
    * Integrated help, editor, etc
    * Debugging and data object viewing
* Disadvantages
    * Older and less updated packages sometimes run unexpectedly

#### RStudio Server 
There is also an RStudio version that runs via a modern web browser (Chrome, Safari, Firefox).  This is how we'll be using RStudio in this class. 

* Advantages
    * Same as Rstudio Desktop
    * Able to run your code on servers with many CPUs and large memory. 


### A bit of history 
S -> SPlus -> R



### Limitations of R 
Everything is in memory.

### Setting Variables 
Assignments in R can be done with `<-` or `=`.  However, there is a strong preference for using `<-`.

### References 
* R in a nutshell
* R Cookbook
* Use R! Series at Springer


### Basics 



### Command Line 
R is an interactive language, much like the BASH shell.


    $ R
    
    R version 3.0.0 (2013-04-03) -- "Masked Marvel"
    Copyright (C) 2013 The R Foundation for Statistical Computing
    Platform: x86_64-apple-darwin10.8.0 (64-bit)

    R is free software and comes with ABSOLUTELY NO WARRANTY.
    You are welcome to redistribute it under certain conditions.
    Type 'license()' or 'licence()' for distribution details.

      Natural language support but running in an English locale

    R is a collaborative project with many contributors.
    Type 'contributors()' for more information and
    'citation()' on how to cite R or R packages in publications.

    Type 'demo()' for some demos, 'help()' for on-line help, or
    'help.start()' for an HTML browser interface to help.
    Type 'q()' to quit R.

    >


### Numbers

Numbers are interpreted literally

    > 2.5
    [1] 2.5

    > typeof(1)
    [1] "double"


### Character Vectors
    
Character objects are used to represent text between quotes

    > "My name is Jonah"
    [1] "My name is Jonah"

Single quotes can also be used to enclose double quotes within your string.

    > 'His name is "Theo"'
    [1] "His name is \"Theo\""

What are those \" for?  They're escape codes, they "escape" from their normal job of closing a string for that one character.

### Boolean

`TRUE` and `FALSE` are special words in R

    > "a" == "b"
    1] FALSE
    > "a" == "a"
    [1] TRUE

    > TRUE == TRUE
    [1] TRUE


### Vectors 

Vectors can be created using the `c()` function to *combine* elements.

    > myvar <- c(1,2,3,4,5)
    > myvar
    [1] 1 2 3 4 5
    > myvar[1]
    [1] 1
    > myvar[1:3]
    [1] 1 2 3


### Functions

    function(arguments) {body} 


### Installing packages

We're going to install the package ggplot2 for our plotting needs.  There are other plotting tools in R, but ggplot2 is a modern plot package that follows [Leeland Wilkinson's "Grammer of Graphics"](http://link.springer.com/book/10.1007/0-387-28695-0/)

    install.packages('ggplot2', repos=c("http://cran.rstudio.com/"))

## plyr

### plyr intro

** Assign plyr paper **

Plyr is a tool to enable split, apply, combine type workflows.  Imagine a dataset that you want to split apart, run an operation on, and recombine.

## ggplot2

### Spectrograhps

    readspec <- function(filename) {
        # A function to read spectrograph files
        spec <- read.csv(filename, sep='\t')
        names(spec) <- c('wavelength', 'reflectance')
        spec$experiment <- basename(filename)
        return(spec)
    }

    files <- list.files(recursive=TRUE, pattern="mn.txt")

    specs <- ldply(files, readspec)


### Simple Plot 

    plot <- ggplot(specs, aes(x=wavelength, y=reflectance, color=experiment))
    plot + geom_line() + ylim(0,1) 

### Tweaking

    plot + geom_line() + ylim(0,1) + geom_vline(x=landsat_tm, color="gray60", alpha=0.5)   

### Faceting

     plot + facet_wrap(~experiment) +  geom_line() + geom_vline( x=landsat_tm, color='gray60', alpha=0.5) + ylim(0,1) 
    

### Annotations

    # Landsat band ranges
    landsat_tm <- c(450, 520, 520, 600, 630, 690, 760, 900, 1550, 1750)
    landsat_etm <- c(450, 520, 520, 600, 630, 690, 770 900, 1550, 1750)

    plot + geom_line() + ylim(0,1) + geom_vline(x=landsat_tm, color="gray60", alpha=0.5) + 
        annotate("text", x=485, y=0.99, label="1") +
        annotate("text", x=560, y=0.99, label="2") +
        annotate("text", x=615, y=0.99, label="3")

### Multiple PDF Outputs

    makeplot <- function(df) {
        outname <- paste(strsplit(unique(df$experiment),split="[.]")[[1]][1], ".pdf", sep="")
        pdf(outname, width=17, height=11)
        print(ggplot(df, aes(x=wavelength, y=reflectance)) + geom_line() + ops(title=strsplit(unique(df$experiment))
        dev.off()
    }

    d_ply(specs, .(experiment), makeplot)


### Advanced 
[Learn X in Y minutes where X=R](Lhttp://learnxinyminutes.com/docs/r) 
