### Finally

    readspec <- function(filename) {
    # A function to read spectral files
        spec <- read.table(filename, header=TRUE)
        names(spec) <- c('wavelength', 'reflectance')
        spec$experiment <- basename(filename)
        return(spec)
    }
    holly_bush_clean <- readspec('./field-data/group1-field/holly_bush_10cm/holly_bush_10cm.mn.txt')

Try it: 
    
    holly_bush_clean <- readspec('./field-data/group1-field/holly_bush_10cm/holly_bush_10cm.mn.txt')
    yellowgrass_clean <- readspec('./field-data/group1-field/yellowgrass/yellowgrass_mean.mn.txt')
    spec <- rbind(holly_bush_clean,yellowgrass_clean)


### Simple Plot 

    specplot <- ggplot(spec, aes(x=wavelength, y=reflectance, color=experiment))
    specplot + geom_line() + ylim(0,1) 

### Annotations

    # Landsat band ranges
    landsat_tm <- c(450, 520, 520, 600, 630, 690, 760, 900, 1550, 1750)
    landsat_etm <- c(450, 520, 520, 600, 630, 690, 770 900, 1550, 1750)

    specplot + 
        geom_line() + 
        ylim(0,1) + 
        geom_vline(x=landsat_tm, color="gray60", alpha=0.5) + 
        annotate("text", x=485, y=0.99, label="1") +
        annotate("text", x=560, y=0.99, label="2") +
        annotate("text", x=615, y=0.99, label="3")

Try adding the rest of the annotations for the remaining bands

### Tweaking

    specplot + 
        geom_line() + 
        ylim(0,1) + 
        geom_vline(x=landsat_tm, color="gray60", alpha=0.5)   

### Faceting

     specplot + 
        facet_wrap(~experiment) +  
        geom_line() + 
        geom_vline( x=landsat_tm, color='gray60', alpha=0.5) + 
        ylim(0,1) 

### Wrapping it all in a function
    makeplot <- function(spec) {
        specplot <- ggplot(spec, aes(x=wavelength, y=reflectance, color=experiment))
        print(specplot +  
            geom_line() + 
            ylim(0,1) )
    }


### Writing to PDFs and PNGs.
Sometimes you want to write a script that drops a whole bunch of images into a single file or directory.

    pdf('filename.pdf', width=11, height=8.5)
    print(     specplot + 
            facet_wrap(~experiment) +  
            geom_line() + 
            geom_vline( x=landsat_tm, color='gray60', alpha=0.5) + 
            ylim(0,1) 
    )
    dev.off()

There are display drivers for `bmp(), jpeg(), png(), tiff(), svg(), ps(), pdf() and cairo_pdf()`. 


### `plyr()`

`plyr` is a package used for split-apply-combine workflows.

    install.packages('plyr')

More info at: ["Split-Apply-Combine Strategy for Data Analysis"](http://www.jstatsoft.org/v40/i01/paper)


### Multiple PDF Outputs


    makeplot <- function(df) {
        outname <- paste(
            strsplit(
                unique(
                    df$experiment),split="[.]")[[1]][1], ".pdf", sep=""
            )
        pdf(outname, width=17, height=11)
        print(ggplot(df, aes(x=wavelength, y=reflectance)) + 
            geom_line() + 
            ops(title=strsplit(unique(df$experiment))
        dev.off()
    }

    d_ply(specs, .(experiment), makeplot)





### Build a dataset with all data 
 
    # Find all files from both groups
    files <- list.files(recursive=TRUE, pattern="mn.txt")

    # ldply takes a list, runs a function for each item in the list
    #    and returns a combined data.frame of all results.
    specs <- ldply(files, readspec)



### Raster Package


### Raster timeseries

lapply( files, function(x) strptime(substr(x,10,16),format="%Y%j"))
as.POSIXct(unlist(lapply( files, function(x) as.POSIXct(strptime(substr(x,10,16),format="%Y%j",tz="GMT")))), origin="1970-01-01", tz="GMT")



### Advanced 
[Learn X in Y minutes where X=R](Lhttp://learnxinyminutes.com/docs/r) 





### Built-in Example datasets
 
    mtcars
    ?mtcars # shows more info

### Lattice 

    library(lattice)
    attach(mtcars)
    # mtcars is a built in dataset we can use to play with lattice
    mtcars

### `xyplot`
    
    xyplot(mpg ~ wt)
    xyplot(mpg ~ wt | gear)
    xyplot(mpg ~ wt | gear * cyl)

What is going on here?  Equation notation:
    
    y ~ x # plot variable y with respect to x
    y ~ x | con1 # plot variable y wrt x conditioning on factor "con1"
    y ~ x | con1 * con2 

### `splom()`

    splom(mtcars[c(1,3,4,5,6)], 
  	 main="MTCARS Data")

The power of lattice comes from formulas for more on lattice's use of formulas look at `help(xyplot)` in the Arguments --> x section.

### Writing a useful function

    library(lattice)
    amfplot <- function(datafile) {
        mydata <- read.csv(datafile)
        print(names(mydata))
        plotvar <- readline("Enter variable name you would like to plot: ")
        mydata_clean <- mydata[mydata[plotvar] != -9999.00,]
        f <- as.formula(paste(plotvar,' ~ DoY'))
        print(xyplot( f, data=mydata_clean, type='l'))
    }

Any time you're doing a plot inside a function or `{}` it is a good idea to wrap the plot function in a `print()`.

### What's going on here? (1/3)
We're importing `lattice`

    library(lattice)

Declaring a function that accepts a single parameter `datafile`

    amfplot <- function(datafile) {

`datafile` is just a path to a file, we then open the file

        mydata <- read.csv(datafile)

### What's going on part 2/3

We then print out a list of variable names from the dataset using `names()`:

    print(names(mydata))

We prompt the user to enter a column name they'd like to plot:

    plotvar <- readline("Enter variable name you would like to plot: ")

Based on that variable name we then remove all occurrences of the value -9999.00:

    mydata_clean <- mydata[mydata[plotvar] != -9999.00,]

### Whats going on part 3/3

We make a formula representing the plot we'd like to show.

    f <- as.formula(paste(plotvar, ' ~ DoY'))

then we make a plot expression and print it:

    print(xyplot( f, data=mydata_clean, type='l'))

Finally we close the function block:
    
    }


### Lets enter the function

    library(lattice)
    amfplot <- function(datafile) {
        mydata <- read.csv(datafile)
        print(names(mydata))
        plotvar <- readline("Enter variable name you would like to plot: ")
        mydata_clean <- mydata[mydata[plotvar] != -9999.00,]
        f <- as.formula(paste(plotvar,' ~ DoY'))
        print(xyplot( f, data=mydata_clean, type='l'))
    }


### calling the function

    amfplot('/data/vol10/education/courses//Duckles_programming/AMF_USHa1_2003_L4_h_V002.txt')




