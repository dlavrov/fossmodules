### Review

    y <- c(1,2,3,4,6)   # to combine elements into vectors
    x <- 10             # <- is the preffered assignment operator
    {}                  # for grouping
    y[1]; y[y %% 3 == 0]# Selections
    install.packages('ggplot2')
    if ( x == 10) print('we made it into the if statement')
    ?c; help('if') # getting help
    mydata <- read.csv('somefile.txt')

### Review

    myfunction <- function(param1,param2='something') 
        { print(paste(param1,param2) }
    p <- ggplot(df, aes(x=xvar, y=yvar, group=somefactor)); p + geom_point()
    readspec # a function to normalize ASD data



### A Generalized function for reading in ASD Data.

    readspec <- function(filename) {
    # A function to read and normalize column names on 
    #    spectral files from ASD devices
     
        spec <- read.table(filename, header=TRUE)
        names(spec) <- c('wavelength', 'reflectance')
        spec$experiment <- basename(filename)
        return(spec)
   
    }
    holly_bush_clean <- readspec('./field-data/group1-field/holly_bush_10cm/holly_bush_10cm.mn.txt')

Try it: 
    
    holly_bush_clean <- readspec('./field-data/group1-field/holly_bush_10cm/holly_bush_10cm.mn.txt')
    yellowgrass_clean <- readspec('./field-data/group1-field/yellowgrass/yellowgrass_mean.mn.txt')
    spec <- rbind(holly_bush_clean,yellowgrass_clean)


### Simple Plot 

    specplot <- ggplot(spec, aes(x=wavelength, y=reflectance, color=experiment))
    specplot + geom_line() + ylim(0,1) 

### Annotations

    # Landsat band ranges
    landsat_tm <- c(450, 520, 520, 600, 630, 690, 760, 900, 1550, 1750)
    landsat_etm <- c(450, 520, 520, 600, 630, 690, 770 900, 1550, 1750)

    specplot + 
        geom_line() + 
        ylim(0,1) + 
        geom_vline(x=landsat_tm, color="gray60", alpha=0.5) + 
        annotate("text", x=485, y=0.99, label="1") +
        annotate("text", x=560, y=0.99, label="2") +
        annotate("text", x=615, y=0.99, label="3")

Try adding the rest of the annotations for the remaining bands


### Faceting

     specplot + 
        facet_wrap(~experiment) +  
        geom_line() + 
        geom_vline( x=landsat_tm, color='gray60', alpha=0.5) + 
        ylim(0,1) 

### Wrapping it all in a function
    makeplot <- function(spec) {
        specplot <- ggplot(spec, aes(x=wavelength, y=reflectance, color=experiment))
        print(specplot +  
            geom_line() + 
            ylim(0,1) )
    }


### Writing to PDFs and PNGs.
Sometimes you want to write a script that drops a whole bunch of images into a single file or directory.

    pdf('filename.pdf', width=11, height=8.5)
    print(     specplot + 
            facet_wrap(~experiment) +  
            geom_line() + 
            geom_vline( x=landsat_tm, color='gray60', alpha=0.5) + 
            ylim(0,1) 
    )
    dev.off()

There are display drivers for `bmp(), jpeg(), png(), tiff(), svg(), ps(), pdf() and cairo_pdf()`. 


### `plyr()`

#### Overview
`plyr` is a package used for split-apply-combine workflows.

    install.packages('plyr')

More info at: ["Split-Apply-Combine Strategy for Data Analysis"](http://www.jstatsoft.org/v40/i01/paper)


#### plyr functions

![](./images/plyr_functions.png)


#### Arrays 
Sliced into lower-d pieces

    a*ply(.data, .margins, .fun, ..., .progress="none")

#### Data frames
Subsetted by combinations of variables
    
    d*ply(.data, .variables, .fun, ..., .progress="none")


#### Lists
Each element in a list is a piece (similar to *apply functions in R)
     
    l*ply(.data, .fun, ..., .progress="none")


### plyr slice 2d

![](./images/slice_2d.png)

### plyr slice 3d
![](./images/slice_3d.png)

### splits

![](./images/plyr_splits.png)

### Build a dataset with all data 
 
    # Find all files from both groups
    setwd('/data/vol10/education/courses/Duckles_programming')
    files <- list.files(recursive=TRUE, pattern="mn.txt")

    # ldply takes a list, runs a function for each item in the list
    #    and returns a combined data.frame of all results.
    specs <- ldply(files, readspec)


### Multiple PDF Outputs

    makeplot <- function(df) {
        print(ggplot(df, aes(x=wavelength, y=reflectance)) + 
            geom_line() + 
            ops(title=strsplit(unique(df$experiment))
    }

    pdf('somefile.pdf', width=11, height=8.5)
    d_ply(specs, .(experiment), makeplot)
    dev.off()



### Landsat bands

    # Landsat TM
    landsat_tm <- list(c(450, 520), c(520, 600), c(630, 690), c(760, 900), 
                        c(1550, 1750), c(10400, 12500), c(2080, 2350))
    # Landsat ETM+
    landsat_etm <- list(c(450,520), c(520,600), c(630,690), c(770,900), 
                          c(1550,1750), c(10400,12500), c(2090,2350),c(520,900))
    # Landsat 8
    landsat_8 <- list(c(430,450),c(450,510), c(530,590), c(640, 670), c(850,880), 
                        c(1570,1650), c(2110,2290), c(500,680), c(1360,1380), 
                        c(10600,11190), c(11500,12510))

    # Shortcut
    source('/data/vol10/education/courses/Duckles_programming/bands.R')



### Summarize by band

    band1 <- subset(specs, wavelength > 450 & wavelength < 520 )


### Generalize
    
    summarizebyband <- function(df, bands) {
      l <- ldply(bands, function(x) 
        return(
          data.frame(value=mean(
            subset(df, wavelength > x[1] & wavelength < x[2])$reflectance ) )
        )
      )
      return(data.frame(average=l,band=1:length(bands)))
    }

### Switching out sensors

    ddply(specs, .(experiment), summarizebyband, landsat_tm)
    ddply(specs, .(experiment), summarizebyband, landsat_etm)
    ddply(specs, .(experiment), summarizebyband, landsat_8)


### Generalize Further

    summarizebyband <- function(df, bands, FUN, sensor="unknown") {
      l <- ldply(bands, function(x) return(data.frame(
                value=FUN(subset(df, wavelength > x[1] & wavelength < x[2])$reflectance ) 
                )
            )
        )
      return(data.frame(average=l,band=1:length(bands),sensor=sensor))
    }


### Try various `FUN` options
    ddply(specs, .(experimetn), summarizebyband, landsat_tm,mean)
    ddply(specs, .(experiment), summarizebyband, landsat_tm,max)
    ddply(specs, .(experiment), summarizebyband, landsat_tm,min)

### Run for all Landsat sensors

    # `specs` is our data frame of all experiments
    ltm <- ddply(specs, .(experiment), summarizebyband, 
            landsat_tm, mean,"tm")
    etm <- ddply(specs, .(experiment), summarizebyband, 
            landsat_etm, mean, "etm")
    l8 <- ddply(specs, .(experiment), summarizebyband, 
            landsat_8, mean, "l8")
    toplot <- rbind(ltm,etm,l8)

    ggplot(toplot, aes(x=band,y=value, color=experiment)) + 
        geom_line(alpha=0.8) + geom_point() + facet_wrap(~sensor)


### Exercise

Make a data structure for MODIS bands

    # Landsat TM
    landsat_tm <- list(c(450, 520), c(520, 600), c(630, 690), c(760, 900), 
                        c(1550, 1750), c(10400, 12500), c(2080, 2350))

Use your web browser to find the MODIS spectral bands and create a list which contains their spectral ranges and make a plot for MODIS bands.


### Next Lecture

Raster package for reading MODIS data.


