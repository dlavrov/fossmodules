### R Programming Lecture 1

Jonah M. Duckles

OU IT - Research Informatics

jduckles@ou.edu

### Why use R?
* Advantages
    * Can be run nearly anywhere (servers, clusters, etc)
    * lightweight on system resources
    * useful for testing
* Disadvantages 
    * No gui, or detached gui
    * Not an integrated development environment



### RStudio
[RStudio](http://www.rstudio.com/) is a development environment for R that is very easy to use.

![RStudio Desktop](./images/rstudio-windows.png)

### About RStudio
* Advantages
    * Easy to use
    * Integrated help, editor, etc
    * Debugging and data object viewing
* Disadvantages
    * Older and less updated packages sometimes run unexpectedly

### RStudio Server 
There is also an RStudio version that runs via a modern web browser (Chrome, Safari, Firefox).  This is how we'll be using RStudio in this class. 

* Advantages
    * Same as Rstudio Desktop
    * Able to run your code on servers with many CPUs and large memory. 


### A bit of history 
#### S language

* Developed by John Chambers at Bell Laboratories
* Motivation was "to turn ideas into software, quickly and faithfully"

#### S-Plus

* Commercial adaptation of S 

#### R Language

* GNU Licensed Open Source project
* Created by Ross Ihaka and Robert Gentleman in New Zealand 
* Named for the first letter in the primary author's names.


### When to use R 
* Plotting
* Statiscical analysis
* where everything can fit in memory.

### References 
* R in a nutshell
* R Cookbook 
* [Use R! Series at Springer](http://bit.ly/UseRBooks)

### Command Line 
R is an interactive language, much like the BASH shell.


    $ R
    
    R version 3.0.0 (2013-04-03) -- "Masked Marvel"
    Copyright (C) 2013 The R Foundation for Statistical Computing
    Platform: x86_64-apple-darwin10.8.0 (64-bit)

    R is free software and comes with ABSOLUTELY NO WARRANTY.
    You are welcome to redistribute it under certain conditions.
    Type 'license()' or 'licence()' for distribution details.

      Natural language support but running in an English locale

    R is a collaborative project with many contributors.
    Type 'contributors()' for more information and
    'citation()' on how to cite R or R packages in publications.

    Type 'demo()' for some demos, 'help()' for on-line help, or
    'help.start()' for an HTML browser interface to help.
    Type 'q()' to quit R.

    >

### Starting RStudio 

We are going to use RStudio server in this class. Please connect to it at:

http://bison.rccc.ou.edu:8787/

### R is Interactive

When you enter commands into the R prompt you'll get immediate feedback:

    > 1 + 2 + 7

    > 1 + 2 * 3

    > (1 + 2) * 3

### Everything is a vector

The results of our first example return as a vector of length one.

    [1] 7



### We can make longer vectors using `c()`

`c()` is used to *combine* numbers into longer vectors

    c(1,2,3,0,10,4,5)

or if what we want is a sequence we can use a shorthand `:` operator:

    1:50


### Operating on vectors

When performing an operation on two vectors, it will be evaluated pairwise:
    
    c(1,2,3,4) + c(10,20,30,40)

    c(1,2,3,4) * c(10,20,30,40)

    c(1,2,3,4) - c(10,20,30,40)

### Mismatched vector sizes

When operating with a smaller vector on a larger one, the smaller one will recycle, or repeat.

    c(1,2,3,4) + 1

    c(1,2,3,4) * c(10,20)

### Numbers

Numbers are interpreted literally

    > 2.5
    [1] 2.5

    > typeof(1)
    [1] "double"

### Character objects
    
Character objects are used to represent text between quotes

    > "My name is Jonah"
    [1] "My name is Jonah"

Single quotes can also be used to enclose double quotes within your string.

    > 'His name is "Theo"'
    [1] "His name is \"Theo\""

What are those `\"` for?  They're escape codes, they "escape" from their normal job of closing a string for that one character.

### Factors

Factors are a special data type used in R for categorical data.  It can be helpful to cast certain columns of datasets to factors.

    eye.colors <- factor(c('brown','blue','blue','green','hazel','brown','blue'))
    levels(eye.colors)

More at `?factor`

### Matrix

Matrices in R are an extension of vectors to two dimensions, they are stored as lists with dimensions.

    m <- matrix(data=1:12, nrow=4, ncol=3)
    m

    m[1,1]
    m[4,2]
    m[4,3]

More at `?matrix`

### Arrays

Extend vectors to more than two dimensions

    a <- array(data=1:24, dim=c(3,4,2))
    a

    a[1,2,1]
    a[3,4,2]

More at `?array`

### data frames

Used to represent tabular data:

    myframe <- data.frame(name=c("Jeff", "Mark", "John", "Fred"), 
        age=c(19,34,65,42), 
        height_in=c(72,70,74,69))
    myframe

More at `?data.frame`

### Boolean

`TRUE` and `FALSE` are special words in R

    > "a" == "b"
    1] FALSE
    > "a" == "a"
    [1] TRUE

    > TRUE == TRUE
    [1] TRUE

More at `help('TRUE')`

### Functions

Functions are called by name and passed a comma delimited list of arguments.

    function(arg1, arg2, ...)

we've already used the `c()` function which takes any number of arguments and returns a vector of values.


We'll talk about how to create our own functions in a little bit.

More at `help(function)`

### Variables

    # assign the value 10 to a variable called x
    x <- 10

    # assign the value 15 to a variable called y
    y <- 15
    
    # combine the values of x and y to a variable called z
    z <- c(x,y)


### Selecting vector elements

    # assign some values to a
    a <- c(1,2,3,5,10,1:25)
    # look at a
    a
    # interogate a to get the 7th element
    a[7]

### Other ways to select
    
We can perform selections based on properties of the data, Lets look at `a mod 3` (modulus operator in R is `%%`)

    a %% 3
    [1] 1 2 0 2 1 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1

This shows us the remainder when a value is divided by 3.

Now lets select the elements of a which evenly divide (remainder == 0)
    
    a[a %% 3 == 0]
    

### Installing packages

Much of the power in R comes from outside packages.  Lets go ahead and make sure we have a package called `ggplot2` that we'll be using later.

    install.packages('ggplot2',repos="http://cran.rstudio.com/")

Where to find packages:
* [All Packages](http://cran.r-project.org/web/packages/available_packages_by_name.html)
* [Task Views](http://cran.r-project.org/web/views/)

### RStudio way

![Rstudio Package manager](./images/rstudio-packages.png)

### semicolons

Either semicolons or newline (carriage returns) can be used to separate R expressions:

    x <-1; y <- 2; z <- c(x,y) 

is the same as
    
    x <-1
    y <-2
    z <- c(x,y)

In this sense semicolons are not **required** like they are in `C`

### curly braces

Used to group a series of expressions and only return the last one

    { x <- 1; y <-2; z <- c(1,2); z*2 }


### Control structures

    if (condition) expr 
    if (condition) cons.expr else alt.expr

### if example
    
    x <- 1
    if ( x == 1 ) print('Yay, you set x right')
    
    if ( x > 10 ) print('Your number is big') else 
        print('Your number is small')

### `{}` to help organize

Curly braces can be helpful to organize long conditional statements and increase code readability:

    if ( x > 10) {
        print ('Your number is big')
    }
    else {
        print('Your number is small')
    }

### Getting help

    ?functionname
    # or
    help('functionname')

Example:

    ?c

    help('if')

Certain reserved words like `if` will require the `help('functionname')` syntax.


### Opening outside datasets

`read.table` is used to read data into R.

Lets look at the help for `read.table`:

    ?read.table

### Interpreting the help

There are some helper functions listed in the help page for `read.table`:

* `read.csv`
* `read.csv2`
* `read.delim`
* `read.delim2`

Notice that these are just calls to `read.table` with different default parameters.

### `read.csv`

Lets use `read.csv` to open the Ameriflux data we downloaded last week.

    harvard <- read.csv('/data/vol10/education/courses/Duckles_programming/AMF_USHa1_2003_L4_h_V002.txt')

### Looking at the data
    
    head(harvard)

### Univariate summary statistics

    summary(harvard)

### Looking at one variable

    summary(harvard$Precip)

    summary(harvard$Precip[harvard$Precip >= 0])


### Cleaning up the dataset

    harvard_clean <- harvard[harvard$Precip != -9999.0,]
    # This will remove all observations where Precip is less than 0

Notice the `,` at the end of the expression.  This tells R to select all columns based on the condition in one column.  For more info on selections see: `help('[')`

### Managing memory
Remember that if your dataset is large, R keeps all data in memory, so you'll need to make sure to clean up after yourself.  You can do this by using `rm()`

    rm(harvard)

### Make a plot

Plotting this data set requires us to remove `-9999.0` values.

    plot(harvard_clean$DoY,harvard_clean$Precip, type="l")

for more information on `plot()` do `help('plot')`



