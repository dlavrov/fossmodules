### Quick Review
    
    y <- c(1,2,3,4,6)   # to combine elements into vectors
    x <- 10             # <- is the preffered assignment operator
    {}                  # for grouping
    y[1]; y[y %% 3 == 0]# Selections 
    install.packages('ggplot2')
    if ( x == 10) print('we made it into the if statement') 
    ?c; help('if') # getting help
    mydata <- read.csv('somefile.txt')

### Writing a functions

functions in R are created by calling `function()` and assigning it to a name. Example:

    myfunc <- function() { print("This is awesome") }
    myfunc()

Note, if you call a function without `()` you'll just get the contents of the function displayed on the screen.

    myfunc
    function() { print("This is awesome") }

### Functions with parameters

    mynameis <- function(myname) { paste('hello, my name is',myname) }

    mynameis('Jonah')

For more info on `paste()`, look at `?paste`

### Electromagnetic Radiation 

![The Electromagnetic Spectrum](./images/EM_Spectrum_Properties_edit.svg)

### Wavelength to frequency

$$ 
f = c/λ
$$

    lambdatofrequency <- function(lambda) { 
        clight <- 2.99e8 # speed of light
        return(clight/lambda)
    }

Red light ranges from 620-750nm (1nm = 1e-9 meters).  What is the frequency of Red light?

### Frequency to Wavelength

$$
λ = c / f
$$

**Write your own function to return the wavelength of any frequency of EM Radiation.**

* What is the wavelength of a 2.4GHz radio wave?
* What is the wavelength of radio waves from your favorite radio station? 106.3MHz

#### Units

* 1MHz = 1,000,000 Hz (1e6) 
* 1GHz = 1,000,000,000 Hz (1e9) 

### What did you get?

    frequencytolambda <- function(frequency) {
        clight <- 2.99e8 # speed of light
        return(clight/frequency)
    }

    frequencytolambda(2.4e9)
    frequencytolambda(106.3e6)

### Default parameters

    mydefaults <- function(myname="Jonah", myheight=74.0) {
        heightcm <- myheight * 2.54
        paste('Hello',myname, 'you are', myheight, 
            'inches tall. That is', heightcm,'cm')
    }

When we run this function it will automatically fill in the defaults:
    
    mydefaults()
    [1] "Hello Jonah you are 74 inches tall. That is 187.96 cm"

But we can override defaults:
 
    mydefaults(myname="Fred", myheight=60)
    [1] "Hello Fred you are 60 inches tall. That is 152.4 cm"



### ggplot2

Uses the ["Grammar of Graphics"](http://link.springer.com/content/pdf/10.1007%2F0-387-28695-0.pdf) as inspiration for how to build plots.

![Grammar example (Wilkinson 2005)](./images/grammar.png)

### ggplot2 

    library(ggplot2)
    ggplot(df, aes(x=xvariable, y=yvariable)

    p <- ggplot(mpg, aes(x=cty, y=hwy))
    p + geom_point()
    p + geom_line() # not what we want
    p + geom_point() + facet_wrap(~cyl)


### Reading spectral data

    setwd('/data/vol10/education/courses/Duckles_programming/Lab1')
    holly_bush <- read.table(
        './field-data/group1-field/holly_bush_10cm/holly_bush_10cm.mn.txt',
        header=TRUE)
    names(holly_bush)
    p <- ggplot(holly_bush, aes(x=Wavelength, y=holly_bush_10cm.mn)) 
    p + geom_line() + ylim(0,1)


### Clean the data

Lets write a generic function for reading spectral files and cleaning up the data:

In your code window, start a new function:

    readspec <- function(filename) {
    # A function to read spectral files

### Read the data

    readspec <- function(filename) {
    # A function to read spectral files
        spec <- read.table(filename, header=TRUE)

### Change the column names

    readspec <- function(filename) {
    # A function to read spectral files
        spec <- read.table(filename, header=TRUE)
        names(spec) <- c('wavelength', 'reflectance')

### Add a column describing experiment

    readspec <- function(filename) {
    # A function to read spectral files
        spec <- read.table(filename, header=TRUE)
        names(spec) <- c('wavelength', 'reflectance')
        spec$experiment <- basename(filename)

### Return the data

    readspec <- function(filename) {
    # A function to read spectral files
        spec <- read.table(filename, header=TRUE)
        names(spec) <- c('wavelength', 'reflectance')
        spec$experiment <- basename(filename)
        return(spec)

   
### Finally

    readspec <- function(filename) {
    # A function to read spectral files
        spec <- read.table(filename, header=TRUE)
        names(spec) <- c('wavelength', 'reflectance')
        spec$experiment <- basename(filename)
        return(spec)
    }
    holly_bush_clean <- readspec('./field-data/group1-field/holly_bush_10cm/holly_bush_10cm.mn.txt')

Try it: 
    
    holly_bush_clean <- readspec('./field-data/group1-field/holly_bush_10cm/holly_bush_10cm.mn.txt')
    yellowgrass_clean <- readspec('./field-data/group1-field/yellowgrass/yellowgrass_mean.mn.txt')
    spec <- rbind(holly_bush_clean,yellowgrass_clean)


### Simple Plot 

    specplot <- ggplot(spec, aes(x=wavelength, y=reflectance, color=experiment))
    specplot + geom_line() + ylim(0,1) 

### Annotations

    # Landsat band ranges
    landsat_tm <- c(450, 520, 520, 600, 630, 690, 760, 900, 1550, 1750)
    landsat_etm <- c(450, 520, 520, 600, 630, 690, 770 900, 1550, 1750)

    specplot + 
        geom_line() + 
        ylim(0,1) + 
        geom_vline(x=landsat_tm, color="gray60", alpha=0.5) + 
        annotate("text", x=485, y=0.99, label="1") +
        annotate("text", x=560, y=0.99, label="2") +
        annotate("text", x=615, y=0.99, label="3")

Try adding the rest of the annotations for the remaining bands

### Tweaking

    specplot + 
        geom_line() + 
        ylim(0,1) + 
        geom_vline(x=landsat_tm, color="gray60", alpha=0.5)   

### Faceting

     specplot + 
        facet_wrap(~experiment) +  
        geom_line() + 
        geom_vline( x=landsat_tm, color='gray60', alpha=0.5) + 
        ylim(0,1) 

### Wrapping it all in a function
    makeplot <- function(spec) {
        specplot <- ggplot(spec, aes(x=wavelength, y=reflectance, color=experiment))
        print(specplot +  
            geom_line() + 
            ylim(0,1) )
    }

### `plyr`

`plyr` is a package used for split-apply-combine workflows.

    install.packages('plyr')

More info at: ["Split-Apply-Combine Strategy for Data Analysis"](http://www.jstatsoft.org/v40/i01/paper)





