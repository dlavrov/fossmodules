### Writing a functions

functions in R are created by calling `function()` and assigning it to a name. Example:

    myfunc <- function() { print("This is awesome") }
    myfunc()

Note, if you call a function without `()` you'll just get the contents of the function displayed on the screen.

    myfunc
    function() { print("This is awesome") }


### Functions with parameters

    mynameis <- function(myname) { paste('hello, my name is',myname) }

    mynameis('Jonah')

For more info on `paste()`, look at `?paste`

### Default parameters

    mydefaults <- function(myname="Jonah", myheight=74.0) {
        paste('Hello',myname, 'you are', myheight, 'inches tall')
    }

When we run this function it will automatically fill in the defaults:
    
    mydefaults()
    [1] "Hello Jonah you are 74 inches tall"

But we can override defaults:
 
    mydefaults(myname="Fred", myheight="60")
    [1] "Hello Fred you are 60 inches tall"


### Built-in Example datasets

    mtcars
    ?mtcars # shows more info

### Lattice 

    library(lattice)
    attach(mtcars)
    # create factors with value labels 
    gear.f<-factor(gear,levels=c(3,4,5),
  	 labels=c("3gears","4gears","5gears")) 
    cyl.f <-factor(cyl,levels=c(4,6,8),
        labels=c("4cyl","6cyl","8cyl")) 


### Lattice plots

    xyplot(mpg~wt|cyl.f*gear.f, data=mtcars)
    splom(mtcars[c(1,3,4,5,6)], 
  	 main="MTCARS Data")

The power of lattice comes from formulas for more on lattice's use of formulas look at `help(xyplot)` in the Arguments --> x section.

### Writing a useful function

    library(lattice)
    amfplot <- function(datafile) {
        mydata <- read.csv(datafile)
        print(names(mydata))
        plotvar <- readline("Enter variable name you would like to plot: ")
        mydata_clean <- mydata[mydata[plotvar] != -9999.00,]
        f <- as.formula(paste(plotvar,' ~ DoY'))
        print(xyplot( f, data=mydata_clean, type='l'))
    }

Any time you're doing a plot inside a function or `{}` it is a good idea to wrap the plot function in a `print()`.

### What's going on here? (1/3)
We're importing `lattice`

    library(lattice)

Declaring a function that accepts a single parameter `datafile`

    amfplot <- function(datafile) {

`datafile` is just a path to a file, we then open the file

        mydata <- read.csv(datafile)

### What's going on part 2/3

We then print out a list of variable names from the dataset using `names()`:

    print(names(mydata))

We prompt the user to enter a column name they'd like to plot:

    plotvar <- readline("Enter variable name you would like to plot: ")

Based on that variable name we then remove all occurrences of the value -9999.00:

    mydata_clean <- mydata[mydata[plotvar] != -9999.00,]

### Whats going on part 3/3

We make a formula representing the plot we'd like to show.

    f <- as.formula(paste(plotvar, ' ~ DoY'))

then we make a plot expression and print it:

    print(xyplot( f, data=mydata_clean, type='l'))

Finally we close the function block:
    
    }


### Lets enter the function

    library(lattice)
    amfplot <- function(datafile) {
        mydata <- read.csv(datafile)
        print(names(mydata))
        plotvar <- readline("Enter variable name you would like to plot: ")
        mydata_clean <- mydata[mydata[plotvar] != -9999.00,]
        f <- as.formula(paste(plotvar,' ~ DoY'))
        print(xyplot( f, data=mydata_clean, type='l'))
    }


### calling the function

    amfplot('/data/vol10/education/courses//Duckles_programming/AMF_USHa1_2003_L4_h_V002.txt')




### Spectrograhps

    readspec <- function(filename) {
    # A function to read spectrograph files
        spec <- read.csv(filename, sep='\t')
        names(spec) <- c('wavelength', 'reflectance')
        spec$experiment <- basename(filename)
        return(spec)
    }

    files <- list.files(recursive=TRUE, pattern="mn.txt")

    specs <- ldply(files, readspec)


### Simple Plot 

    plot <- ggplot(specs, aes(x=wavelength, y=reflectance, color=experiment))
    plot + geom_line() + ylim(0,1) 

### Tweaking

    plot + geom_line() + ylim(0,1) + geom_vline(x=landsat_tm, color="gray60", alpha=0.5)   

### Faceting

     plot + facet_wrap(~experiment) +  geom_line() + geom_vline( x=landsat_tm, color='gray60', alpha=0.5) + ylim(0,1) 
    

### Annotations

    # Landsat band ranges
    landsat_tm <- c(450, 520, 520, 600, 630, 690, 760, 900, 1550, 1750)
    landsat_etm <- c(450, 520, 520, 600, 630, 690, 770 900, 1550, 1750)

    plot + geom_line() + ylim(0,1) + geom_vline(x=landsat_tm, color="gray60", alpha=0.5) + 
        annotate("text", x=485, y=0.99, label="1") +
        annotate("text", x=560, y=0.99, label="2") +
        annotate("text", x=615, y=0.99, label="3")

### Multiple PDF Outputs

    makeplot <- function(df) {
        outname <- paste(strsplit(unique(df$experiment),split="[.]")[[1]][1], ".pdf", sep="")
        pdf(outname, width=17, height=11)
        print(ggplot(df, aes(x=wavelength, y=reflectance)) + geom_line() + ops(title=strsplit(unique(df$experiment))
        dev.off()
    }

    d_ply(specs, .(experiment), makeplot)


### Advanced 
[Learn X in Y minutes where X=R](Lhttp://learnxinyminutes.com/docs/r) 

